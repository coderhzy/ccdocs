import{_ as s,o as a,c as n,O as l}from"./chunks/framework.1f79dc3f.js";const u=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"interview/JavaScript/index.md","filePath":"interview/JavaScript/index.md","lastUpdated":1683646215000}'),o={name:"interview/JavaScript/index.md"},p=l(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="_1-箭头函数和普通函数有什么区别" tabindex="-1">1.箭头函数和普通函数有什么区别 <a class="header-anchor" href="#_1-箭头函数和普通函数有什么区别" aria-label="Permalink to &quot;1.箭头函数和普通函数有什么区别&quot;">​</a></h2><ol><li>写法不同，箭头函数使用箭头定义，写法简洁。 普通函数使用 function 定义。</li><li>箭头函数都是匿名函数，而普通函数既可以是匿名函数，也可以是具名函数。</li><li>箭头函数不能作为构造函数来使用，普通函数可以用作构造函数，以此来创建一个对象的实例。</li><li>this 指向不同，箭头函数没有 this，在声明的时候，捕获上下文的 this 供自己使用，一旦确定不会再变化。在普通函数中，this 指向调用自己的对象，如果用在构造函数，this 指向创建的对象实例。普通函数可以使用 call，apply，bind 改变 this 的指向。</li><li>箭头函数没有 arguments（实参列表，类数组对象），每一个普通函数在调用后都有一个 arguments 对象，用来存储实际传递的参数。</li><li>箭头函数没有原型，而普通函数有。</li></ol><h2 id="_2-如何判断一个数组是数组" tabindex="-1">2. 如何判断一个数组是数组 <a class="header-anchor" href="#_2-如何判断一个数组是数组" aria-label="Permalink to &quot;2. 如何判断一个数组是数组&quot;">​</a></h2><ol><li><code>Object.prototype.toString.call(arr)</code>，判断其是否等于<code>[object Array]</code>，顶端判断</li><li><code>Array.isArray(arr)</code>a</li></ol><h2 id="_3-颜色拾取器-windows-失焦-bug" tabindex="-1">3. 颜色拾取器 windows 失焦 Bug <a class="header-anchor" href="#_3-颜色拾取器-windows-失焦-bug" aria-label="Permalink to &quot;3. 颜色拾取器 windows 失焦 Bug&quot;">​</a></h2><ul><li>问题存在 <ul><li>选择拾色器以后，错误吸取空白地方，会导致<code>windows</code>系统无法切换<code>中英文</code>。</li><li>使用<code>fixIMEWin</code>函数，开启一个新的窗口再关闭。<strong>主要就是让浏览器失去焦点</strong>。</li><li>解决方法存在问题：过老的浏览器会有闪烁一下的问题。</li></ul></li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">color</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">fixIME</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fixIME</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 是否为windows系统</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isWindows</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">navigator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">platform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Win</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">isWin</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fixIMEWin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">fixIMEWin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_4-使用-export-具名导出和默认导出区别" tabindex="-1">4. 使用 export 具名导出和默认导出区别 <a class="header-anchor" href="#_4-使用-export-具名导出和默认导出区别" aria-label="Permalink to &quot;4. 使用 export 具名导出和默认导出区别&quot;">​</a></h2><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>开篇先阐述个结论，建议使用具名导出。不推荐使用默认导出。</p></div><p>1.1 <strong>默认导出的缺点</strong></p><ul><li><p>默认导出编辑器提示不完善</p></li><li><p>默认导出可以任意命名，会导致函数语义不固定。</p></li><li><p>命名风格统一比较困难</p></li><li><p>默认导出对重构不友好，需要手动修改。</p></li><li><p>如一个包，你不知道他哪个功能是默认导出，此时就需要去阅读源码和文档。</p></li><li><p>默认导出不利于<code>Tree shaking</code>。</p><p>1.2 <strong>具名导出的优点</strong></p></li><li><p>具名导出编辑器提示完善</p></li><li><p>具名导出可以使用编辑器自带的命名工具。</p></li><li><p>具名导出，就可以很快找到对应函数和功能。</p></li><li><p>具名导出则利于<code>Tree shaking</code></p><p>1.3 <strong>不适用默认导出的缺点</strong></p></li><li><ol><li>导出重名问题</li></ol><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Article</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Article</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ArticleComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-design-system</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><ol start="2"><li>组件导出 <img src="https://imgsbed-1301560453.cos.ap-shanghai.myqcloud.com/blog/20220909101029.png" alt="组件导出"></li></ol><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Counter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./HomeView.vue</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>作为用户就可以具名使用这个组件了。</p><h2 id="_5-说说你使用-json-stringify-的场景" tabindex="-1">5. 说说你使用 JSON.Stringify 的场景 <a class="header-anchor" href="#_5-说说你使用-json-stringify-的场景" aria-label="Permalink to &quot;5. 说说你使用 JSON.Stringify 的场景&quot;">​</a></h2><ol><li>存储对象在<code>localstorage</code>中</li><li>深拷贝对象</li><li>利用第二个参数可以传入函数来巧妙删除对象中的某个值</li></ol><h2 id="_6-你了解的内存泄漏" tabindex="-1">6. 你了解的内存泄漏 <a class="header-anchor" href="#_6-你了解的内存泄漏" aria-label="Permalink to &quot;6. 你了解的内存泄漏&quot;">​</a></h2><p><strong>场景一</strong>: 使用 for 循环来入全局变量,比如循环 1W 次,那么程序在执行的时候则为不可控.此时会内存泄漏.因为全局变量不被设置为<code>null</code>,js 的垃圾回收器就不会回收 <strong>场景二</strong>: 使用 for 循环来一万次<code>console.log(obj.a)</code>,也会出现内存不受控制,因为<code>obj</code>内存会激增.这也就是很多打包工具会在 \b<code>production</code>环境来配置移除<code>console.log</code>的原因. <strong>场景三</strong>: 闭包场景: 定义一个函数,这个函数返回另外一个函数.返回的函数是返回一个变量. 那么在全局定义一个<code>obj</code>对象,使用<code>for</code>循环来给<code>obj</code>的每个<code>key</code>加入返回的那个对象. <strong>场景四</strong>: 定义一个按钮,这个按钮向某个容器中去<code>appendChild</code>. 此时我们叫这个容器为<code>container</code>. 再定义一个按钮, 是移除<code>container</code>的元素. 虽然<code>container</code>被移除,但是<code>container</code> 依然会依赖其中被添加进去的元素.从而导致内存泄漏.</p></li></ul>`,13),e=[p];function t(r,c,i,y,F,D){return a(),n("div",null,e)}const b=s(o,[["render",t]]);export{u as __pageData,b as default};

import{_ as a,c as s,o as i,ah as n}from"./chunks/framework.BjEij7qi.js";const g=JSON.parse('{"title":"包管理工具","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/18_package-management.md","filePath":"frontend/javascript/18_package-management.md","lastUpdated":1686287397000}'),l={name:"frontend/javascript/18_package-management.md"},e=n(`<h1 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h1><h2 id="_1-npm-install原理" tabindex="-1">1. npm-install原理 <a class="header-anchor" href="#_1-npm-install原理" aria-label="Permalink to &quot;1. npm-install原理&quot;">​</a></h2><h3 id="_1-1-npm-install-含缓存" tabindex="-1">1.1. npm install 含缓存 <a class="header-anchor" href="#_1-1-npm-install-含缓存" aria-label="Permalink to &quot;1.1. npm install 含缓存&quot;">​</a></h3><ul><li><p>一图胜千言 <img src="https://imgsbed-1301560453.cos.ap-shanghai.myqcloud.com//blog202306081316327.png" alt=""></p></li><li><p>具体查找逻辑</p><ul><li>如果那没有lock.json文件，那么就会去找package.json文件, 安装对应的版本,并生成lock.json文件</li><li>如果有lock.json <ul><li><img src="https://imgsbed-1301560453.cos.ap-shanghai.myqcloud.com//blog202306081319315.png" alt=""></li><li>lock版本 等于 package.json的时候,用上图的lock文件中的<code>integrity</code>的256去上次下载的缓存中找到</li><li>本地缓存的npm包的位置: 终端执行<code>npm get cache</code>查看</li><li><img src="https://imgsbed-1301560453.cos.ap-shanghai.myqcloud.com//blog202306081323633.png" alt=""></li><li>根据<code>integrity</code>的256去本地的<code>index-v5</code>中找到对应的配置,对应配置中 <code>_shasum</code>字段找到对应文件的位置</li><li>然后去<code>content-v2</code>中找到对应的文件,然后解压到<code>node_modules</code>中</li></ul></li></ul></li></ul><h3 id="_1-2-npm-其他命令" tabindex="-1">1.2 npm 其他命令 <a class="header-anchor" href="#_1-2-npm-其他命令" aria-label="Permalink to &quot;1.2 npm 其他命令&quot;">​</a></h3><h3 id="_1-2-1-卸载某个依赖包" tabindex="-1">1.2.1 卸载某个依赖包 <a class="header-anchor" href="#_1-2-1-卸载某个依赖包" aria-label="Permalink to &quot;1.2.1 卸载某个依赖包&quot;">​</a></h3><ul><li><code>npm uninstall &lt;package-name&gt;</code></li><li><code>npm uninstall &lt;package-name&gt; --save</code> 会删除package.json中的依赖</li><li><code>npm uninstall &lt;package-name&gt; --save-dev</code> 会删除package.json中的开发依赖</li></ul><h3 id="_1-2-2-强制重新build" tabindex="-1">1.2.2 强制重新build <a class="header-anchor" href="#_1-2-2-强制重新build" aria-label="Permalink to &quot;1.2.2 强制重新build&quot;">​</a></h3><ul><li><code>npm rebuild</code></li></ul><h3 id="_1-2-3-查看npm包的信息" tabindex="-1">1.2.3 查看npm包的信息 <a class="header-anchor" href="#_1-2-3-查看npm包的信息" aria-label="Permalink to &quot;1.2.3 查看npm包的信息&quot;">​</a></h3><ul><li><code>npm view &lt;package-name&gt;</code></li><li><code>npm view &lt;package-name&gt; versions</code> 查看所有版本</li><li><code>npm view &lt;package-name&gt; version</code> 查看最新版本</li></ul><h3 id="_1-2-3-npm包的发布" tabindex="-1">1.2.3 npm包的发布 <a class="header-anchor" href="#_1-2-3-npm包的发布" aria-label="Permalink to &quot;1.2.3 npm包的发布&quot;">​</a></h3><ul><li><code>npm publish</code></li></ul><h2 id="_2-yarn" tabindex="-1">2. yarn <a class="header-anchor" href="#_2-yarn" aria-label="Permalink to &quot;2. yarn&quot;">​</a></h2><ul><li>对于yarn 基本和 npm用法差不多, 另外yarn还有一个<code>yarn add</code>命令, 用来安装依赖包, 会自动更新package.json文件</li></ul><h3 id="_2-1-安装yarn" tabindex="-1">2.1 安装yarn <a class="header-anchor" href="#_2-1-安装yarn" aria-label="Permalink to &quot;2.1 安装yarn&quot;">​</a></h3><ul><li><code>npm install -g yarn</code></li></ul><h3 id="_2-2-yarn命令" tabindex="-1">2.2 yarn命令 <a class="header-anchor" href="#_2-2-yarn命令" aria-label="Permalink to &quot;2.2 yarn命令&quot;">​</a></h3><ul><li><code>yarn add &lt;package-name&gt;</code> 安装依赖包</li><li><code>yarn remove &lt;package-name&gt;</code> 卸载依赖包</li><li><code>yarn upgrade &lt;package-name&gt;</code> 升级依赖包</li><li><code>yarn upgrade &lt;package-name&gt; --latest</code> 升级依赖包到最新版本</li></ul><h3 id="_2-3-yarn-lock" tabindex="-1">2.3 yarn.lock <a class="header-anchor" href="#_2-3-yarn-lock" aria-label="Permalink to &quot;2.3 yarn.lock&quot;">​</a></h3><ul><li>yarn.lock文件是yarn的缓存文件, 用来记录每个依赖包的版本号, 以及依赖包的依赖包的版本号, 以及依赖包的依赖</li><li>想对比npm的lock.json文件, yarn.lock文件是一个扁平的.</li><li><img src="https://imgsbed-1301560453.cos.ap-shanghai.myqcloud.com//blog202306091257092.png" alt=""></li></ul><h2 id="_3-npx" tabindex="-1">3. npx <a class="header-anchor" href="#_3-npx" aria-label="Permalink to &quot;3. npx&quot;">​</a></h2><h2 id="_3-1-为什么要有npx" tabindex="-1">3.1 为什么要有npx <a class="header-anchor" href="#_3-1-为什么要有npx" aria-label="Permalink to &quot;3.1 为什么要有npx&quot;">​</a></h2><ul><li>为了解决全局安装的包, 不能在不同的项目中使用的问题</li><li>当正常使用vue项目执行<code>npm run serve</code>的时候, 就是<code>vue-cli</code>底层帮我们找到了<code>node_modules/.bin/</code>这个文件, 然后执行这个文件</li><li>如果我们在相比中执行使用<code>webpack</code>其实使用的是全局的<code>webpack</code>, 但是我们在不同的项目中使用的<code>webpack</code>版本可能不一样, 所以我们需要在不同的项目中使用不同的<code>webpack</code>版本, 所以我们需要在不同的项目中安装不同的<code>webpack</code>版本, 但是我们又不想在每个项目中安装<code>webpack</code>, 所以我们需要一个工具来帮我们解决这个问题, 这个工具就是<code>npx</code></li><li>我们直接使用<code>npx</code>那么执行的就是当前项目中的<code>node_modules/.bin/</code>中的文件</li></ul><h2 id="_4-发布自己的包" tabindex="-1">4. 发布自己的包 <a class="header-anchor" href="#_4-发布自己的包" aria-label="Permalink to &quot;4. 发布自己的包&quot;">​</a></h2><ul><li>将自己的代码写好, 配置<code>package.json</code>文件, 然后执行<code>npm publish</code>就可以发布自己的包了</li></ul><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hy_test_utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a test utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Error: no test specified</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;coderhzy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MIT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/codehzy/codehzy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;homepage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/codehzy/codehzy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keywords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;hzy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;coderhzy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;utils&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,27),t=[e];function p(h,o,r,c,d,k){return i(),s("div",null,t)}const m=a(l,[["render",p]]);export{g as __pageData,m as default};

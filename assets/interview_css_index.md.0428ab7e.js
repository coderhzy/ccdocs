import{_ as e,o,c as a,O as d}from"./chunks/framework.1f79dc3f.js";const _=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"interview/css/index.md","filePath":"interview/css/index.md","lastUpdated":1683646215000}'),c={name:"interview/css/index.md"},s=d('<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="一、说一下css盒模型吧" tabindex="-1">一、说一下css盒模型吧 <a class="header-anchor" href="#一、说一下css盒模型吧" aria-label="Permalink to &quot;一、说一下css盒模型吧&quot;">​</a></h2><ol><li>每一个html元素都可以被看成一个盒子,这个盒子由里到外由这个元素的<code>内容content</code>,<code>边框border</code>,<code>内边距padding</code> 以及<code>外边框margin组成</code></li><li>盒子模型一般分为<strong>标准盒模型</strong>和<strong>怪异盒模型</strong>,怪异盒模型又叫IE盒模型。那么这两种盒模型有什么区别呢。</li><li><strong>标准盒模型</strong>：元素的<code>width</code>就是内容<code>content</code>的宽度。如果我们给一个元素设置<code>width</code>，那么<code>width</code> 指的就是内容的宽度。此时这个元素的<code>总宽度 = width + 内边距 + 边框+ 外边距</code>。</li><li><strong>怪异盒模型</strong>：<code>width</code>并部署元素的宽度，<code>width</code>属性值 = <code>内容</code> + <code>内边距</code> + <code>边框</code>。如果给元素设置<code>width</code> ，那么这个元素的总宽度为<code>width</code> + <code>外边距</code>。</li><li>正常来说是标准盒模型，通过<code>box-sizing</code>值为<code>border-box</code>的时候就是<em>怪异盒模型</em>。<code>box-sizing</code>值为<code>content-box</code>的时候就是 <em>标准盒模型</em>。</li></ol><h2 id="二、css的display双值" tabindex="-1">二、css的display双值 <a class="header-anchor" href="#二、css的display双值" aria-label="Permalink to &quot;二、css的display双值&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p><a href="https://hacks.mozilla.org/2019/10/the-two-value-syntax-of-the-css-display-property/" target="_blank" rel="noreferrer">原文链接</a></p><ol><li>本文介绍了为display在使用的时候可以设置双值。</li><li>主要产生原因阐述 <ol><li>我们常在开发中使用<code>display:flex</code>，其实此时这个属性为<code>block flex</code>。因为我们设置以后，无论是行级元素<code>span</code> 还是块级元素<code>div</code>都会被设置为<strong>块元素</strong>。</li><li>因此我们需要了解<code>display</code>的双值来应对某个特定的开发场景。</li></ol></li><li><img src="https://imgsbed-1301560453.cos.ap-shanghai.myqcloud.com/blog/display-two-values.png" alt="双值表"></li></ol><h3 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h3><ol><li>如果想<code>display: flex</code>以后，设置为<code>inline</code>。可以设置<code>display: inline-flex</code>，此时容器为<code>flex</code>容器，并且还是行内元素。</li><li>普通的<code>display: flex</code>，则是<code>block</code>。或者可以手动设置<code>display: block-flex</code>。</li></ol><h2 id="三、一行代码实现网页变灰" tabindex="-1">三、一行代码实现网页变灰 <a class="header-anchor" href="#三、一行代码实现网页变灰" aria-label="Permalink to &quot;三、一行代码实现网页变灰&quot;">​</a></h2><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">filter</span><span style="color:#A6ACCD;">: grayscale(1)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',11),i=[s];function l(t,n,r,h,p,m){return o(),a("div",null,i)}const g=e(c,[["render",l]]);export{_ as __pageData,g as default};
